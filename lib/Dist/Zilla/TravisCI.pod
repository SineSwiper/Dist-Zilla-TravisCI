# PODNAME: Dist::Zilla::TravisCI
# ABSTRACT: Travis CI plugins for your DZIL-based distribution

=begin wikidoc

= SYNOPSIS
 
   [@Prereqs]
   [TravisYML]
   
   [Git::CommitBuild]
   release_branch  = build/%b
   release_message = Release build of v%v (on %b)

   [@Git]
   allow_dirty = dist.ini
   allow_dirty = README
   allow_dirty = .travis.yml
   push_to = origin
   push_to = origin build/master:build/master

= DESCRIPTION

== What is Travis CI?

[Travis CI|https://travis-ci.org/] is pure awesome!  Travis is a free and open source CI platform that
hooks directly into [GitHub|https://github.com/].  It's extremely easy to configure, tests on every
major 5.10+ Perl version, and will notify you of test results, either through email or IRC.  (Yes, a bot
will jump into an IRC room, tell you the results, and bounce.  How cool is that?!)

If you're not familiar with CI platforms, this is your chance to get your feet wet.  CI stands for
[Continuous Integration|http://en.wikipedia.org/wiki/Continuous_integration].  This kind of testing is
designed around testing your code every time you commit/push a change.  In this case, this is a hook
into Git via GitHub to make sure that any change you make is going to pass tests.

== Perl is already a "test-heavy" community.  What does this add?

This is true.  Travis CI has a much more profound use with languages without a deep-seated testing
platform like Perl's t/* directory (and its hooks with CPAN).

However, adding Travis CI to your test platform has its benefits:

* Testing in a plain vanilla environment, which your work environment is most definitely *NOT*.
* Testing with Perl 5.10, 5.12, 5.14, 5.16, and beyond, all at the same time.
* Testing your *DZIL* environment, which not even CPAN can do.
* Use Windows or some other non-Linux OS for your work environment?  Great.  Travis runs on Ubuntu, so
you can confirm that it works on Linux.  (Eventually, Travis will support other OSs, like Windows, to
make this even sweeter!)
* [Minimum Version Dependency Testing|Dist::Zilla::TravisCI::MVDT]
* Public announcements of test results.  If somebody breaks something in master, make sure EVERYBODY
knows it!
* If nothing else, you get many more tests before it even touchs CPAN.

== What about the automated CPAN testers?

They're great!  But they are also a bit too late in the process.  Sure, you can fix what you find after
you've found something, but you want some extra insurance that your production release is actually
production ready.

Development releases on CPAN also work, but you have no idea what is on those CPAN tester platforms.
Does it cover the full gamut of Perl versions, or are they just grabbing the latest?  Are they all 
using the latest module dependencies (which may not be want you want)?

You have more control over your Travis CI platform, so you can set up the environment the way you want
it.  That's not to say that the massive CPAN tester army isn't a great boon for Perl, but in the fight
against bugs, you want every weapon available.

== This sounds complicated...

Actually, it's the polar opposite of complicated.  This is literally a full guide on how to make it work:

0 [Sign into Travis CI|http://travis-ci.org/users/auth/github] with your GitHub account.
0 Flip a bit on your distro through the [profile page|https://travis-ci.org/profile].
0 Put the [TravisYML|Dist::Zilla::Plugin::TravisYML] plugin in your dist.ini.

There's some extra configuration you can do: build branches, MVDT, etc.  But, that's the basic setup.
Easy!

= DONATIONS

Travis CI is a completely free service, and they put in a lot of hard work
to make it what it is.

[Please donate!|https://love.travis-ci.org/]

= TODO

* *MVDT* - Yes, I actually need to finish MVDT on my own distros.  I have an excuse, though: I need this
in CPAN in order for Travis to download it.  Hopefully, I can get this finished soon now...
* *Tests* - This has actually been well-tested via other modules, but I still need to add in a test
platform here.  Kinda sad, actually...

=end wikidoc
